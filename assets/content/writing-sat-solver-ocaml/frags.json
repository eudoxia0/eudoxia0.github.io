{"impl":"let impl (p: expr) (q: expr): expr =\n  Or (Not p, q)\n  \nlet iff (p: expr) (q: expr): expr =\n  And (impl p q, impl q p)","expr":"type expr =\n    | Const of bool\n    | Var of string\n    | Not of expr\n    | And of expr * expr\n    | Or of expr * expr","replace":"let rec replace (e: expr) (name: string) (value: expr): expr =\n  match e with\n  | Const b ->\n     Const b\n  | Var v ->\n     if v = name then\n       value\n     else\n       Var v\n  | Not e ->\n     Not (replace e name value)\n  | And (p, q) ->\n     And (replace p name value, replace q name value)\n  | Or (p, q) ->\n     Or (replace p name value, replace q name value)"}